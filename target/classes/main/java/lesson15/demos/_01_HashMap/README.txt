
Class HashMap<K,V> - реалізація Interface Map
з урахуванням хеш-таблиці.
Class HashMap надає всі опціональні операції зіставлення
та допускає null значення та null ключ.
Class HashMap не дає жодних гарантій щодо порядку відображення;
зокрема, не гарантує, що порядок залишиться постійним із часом.
K - тип підтримуваних ключів.
V - тип зіставлених/відображених значень.
https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html


Class HashMap:
- Містить значення, що базуються на ключі.
- Містить лише унікальні ключі.
- Може мати один null ключ та кілька null значень.
- Несинхронізований. Кілька потоків можуть одночасно
модифікувати об'єкт.
- Не підтримує порядок вставки.

Додавання елемента виконується за час O(1), тому що нові елементи
вставляються на початок структури даних (елементів).
Операції отримання та видалення елемента можуть виконуватися за час O(1),
якщо хеш-функція рівномірно розподіляє елементи та відсутні колізії.

Не повинно використовуватися змінний об’єкт як ключ у HashMap в Java,
що може призвести до потенційних проблем і неочікуваної поведінки.
Це пояснюється тим, що ключовий об’єкт у HashMap використовується
для обчислення хеш-коду, який визначає сегмент, де зберігатиметься
відповідне значення. Якщо ключ змінний і змінений після використання
як ключа в HashMap, хеш-код також може змінитися. У результаті ми не
отримаємо значення, пов’язане з ключем, належним чином, оскільки воно
буде розташовано не в тому сегменті.
https://www.baeldung.com/java-hashmap-modify-key

HashMap є однією з найпоширеніших структур даних у Java, яка зберігає
дані в кількох сегменах (buckets), і кожен сегмент (bucket) є пов’язаним
списком. Нові елементи буде додано до сегмента за індексом.
Коли розмір пов’язаного списку збільшується, ефективність пошуку
погіршується. Java 8 покращує продуктивність, перетворюючи пов’язаний
список на червоно-чорне дерево, якщо розмір перевищує порогове значення.
HashMap спочатку використовує LinkedList. Потім, коли кількість записів
перетне певний поріг, LinkedList буде замінено збалансованим бінарним
деревом. Константа TREEIFY_THRESHOLD визначає це порогове значення.
Наразі це значення дорівнює 8, що означає, що якщо в одному сегменті
є більше 8 елементів, Map використовуватиме для їх зберігання дерево.
https://runzhuoli.me/2018/08/31/the-secret-improvement-of-hashmap-in-java8.html
https://www.baeldung.com/java-hashmap-load-factor

