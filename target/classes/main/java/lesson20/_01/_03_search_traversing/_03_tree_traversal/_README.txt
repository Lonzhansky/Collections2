
Обхід (Traversing) дерева означає відвідування кожного
вузла у дереві.
Наприклад, можна скласти всі значення у дереві або знайти
найбільше з них.
Для всіх цих операцій потрібно буде відвідати кожен вузол
дерево.

Лінійні структури даних, такі як масиви, черги та
пов'язані списки, мають лише один спосіб читання даних.
Але ієрархічну структуру даних, таку як дерево, можна
обійти по-різному.

Наприклад,

     1
    / \
   8   10
  / \
 3   6

можемо обійти
1) 1 -> 8 -> 3 -> 6 -> 10
2) 3 -> 6 -> 8 -> 10 -> 1


Хоча цей процес дещо простий, він не враховує
ієрархію дерева, а лише глибину вузлів.

Натомість використовуємо методи обходу, які враховують
основну структуру дерева.

struct node {
    int data;
    struct node * left;
    struct node * right;
}

У struct вузла, який вказують left і right елементи,
можуть бути інші ліві та праві дочірні елементи, тому ми
повинні думати про них як про піддерева, а не підвузли.

Відповідно до цієї структури, кожне дерево є
комбінацію: вузол, що несе дані; два піддерева.

Ціль - відвідати кожен вузол, тому потрібно відвідати все
вузли в піддереві, відвідати кореневий вузол, а також
відвідати всі вузли у правому піддереві.

Залежно від порядку, у якому це робимо, можуть бути
ТИПИ ОБХОДУ.

Невпорядкований обхід (Inorder traversal):
– Спочатку відвідуємо всі вузли у лівому піддереві.
- Потім кореневий вузол.
- Відвідуємо всі вузли у правому піддереві.

inorder(root->left)
display(root->data)
inorder(root->right)

Обхід передупорядкований (Preorder traversal):
- Відвідуємо кореневий вузол.
- Відвідуємо всі вузли у лівому піддереві.
- Відвідуємо всі вузли у правому піддереві.

display(root->data)
preorder(root->left)
preorder(root->right)

Обхід поступорядкований (Postorder traversal):
- Відвідуємо всі вузли у лівому піддереві.
- Відвідуємо всі вузли у правому піддереві.
- Відвідуємо кореневий вузол.

postorder(root->left)
postorder(root->right)
display(root->data)


РЕСУРСИ
https://www.happycoders.eu/algorithms/binary-tree-java/
https://medium.com/@Roshan-jha/a-comprehensive-guide-to-binary-tree-traversal-in-java-74c86ee23725

