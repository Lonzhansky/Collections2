
Stream API
=============

Interface Stream<T>
https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html
Послідовність елементів, що підтримують
послідовні та паралельні агрегатні
операції.

Використовуючи потоки, можемо виконувати різні
агрегатні операції з даними, що повертаються
з колекцій, масивів, операцій введення/виведення.


Функції Java Stream
---------------------
1) Потік не зберігає елементів. Він просто виконує
агрегатні операції (такі як filter() та count()),
щоб отримати бажаний потік даних.

2) Агрегатні операції, які виконуємо над колекцією,
масивом або будь-яким іншим джерелом даних, що не змінюють
дані джерела вони просто повертають новий потік.
Наприклад, код фільтрує рядки довжиною менше 5, використовуючи
потокові операції, але не змінює елементи списку.

3) Всі потокові операції ліниві за своєю природою, що
означає, що вони не виконуються до тих пір, поки вони
не знадобляться.
Наприклад, якщо хочемо відобразити лише перші 2 елементи
списку за допомогою потоку, операція потоку зупиниться
наприкінці другої ітерації після відображення другого елемента
списку.


Як працювати з Java Stream
------------------------------
1) Створити потік.

2) Виконати проміжні (intermediate) операції
над початковим потоком для перетворення його на інший
потік і над подальшими проміжними операціями.
Проміжні операції повертають інший Stream, який дозволяє
викликати кілька операцій у формі запиту.
Проміжні операції не виконуються, доки не буде викликана
термінальна операція. Усі проміжні операції ліниві, тому
вони не виконуються, доки результат обробки дійсно не потрібен.

3) Виконати термінальну (terminal) операцію над
фінальним потоком, щоб одержати результат.
Термінальні операції Java Stream створюють непотоковий результат,
наприклад примітивне значення, колекцію або відсутність значення
взагалі.
Термінальним операціям зазвичай передують проміжні операції, які
повертають інший Stream, який дозволяє підключати операції у формі
запиту.


РЕСУРСИ
https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html
https://www.baeldung.com/java-8-streams-introduction
https://www.baeldung.com/java-8-streams
https://javaconceptoftheday.com/java-8-streams-beginners-guide/
https://jenkov.com/tutorials/java-functional-programming/streams.html
